use demo_database;

CREATE SCHEMA dannys_diner;

CREATE or REPLACE TABLE sales (
  "customer_id" VARCHAR(1),
  "order_date" DATE,
  "product_id" INTEGER
);

INSERT INTO sales
  ("customer_id", "order_date", "product_id")
VALUES
  ('A', '2021-01-01', '1'),
  ('A', '2021-01-01', '2'),
  ('A', '2021-01-07', '2'),
  ('A', '2021-01-10', '3'),
  ('A', '2021-01-11', '3'),
  ('A', '2021-01-11', '3'),
  ('B', '2021-01-01', '2'),
  ('B', '2021-01-02', '2'),
  ('B', '2021-01-04', '1'),
  ('B', '2021-01-11', '1'),
  ('B', '2021-01-16', '3'),
  ('B', '2021-02-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-01', '3'),
  ('C', '2021-01-07', '3');
 

CREATE TABLE menu (
  "product_id" INTEGER,
  "product_name" VARCHAR(5),
  "price" INTEGER
);

INSERT INTO menu
  ("product_id", "product_name", "price")
VALUES
  ('1', 'sushi', '10'),
  ('2', 'curry', '15'),
  ('3', 'ramen', '12');
  

CREATE TABLE members (
  "customer_id" VARCHAR(1),
  "join_date" DATE
);

INSERT INTO members
  ("customer_id", "join_date")
VALUES
  ('A',  '2021-01-07'),
  ('B', '2021-01-09');

describe table members;
describe table sales;
describe table menu;

select * from sales;
select * from menu;
select * from members;

1.What is the total amount each customer spent at the restaurant?

select s."customer_id", sum(m."price") as customer_spend_amount
from sales s inner join menu m on s."product_id" = m."product_id"
group by 1;


2.How many days has each customer visited the restaurant?

select s."customer_id", count("order_date") as customer_visited_count
from sales s inner join menu m on s."product_id" = m."product_id"
group by 1;

3.What was the first item from the menu purchased by each customer?

select * from (select s."customer_id", s."product_id",m."product_name" ,
Row_number() over ( partition by s."customer_id" order by s."order_date" asc) rank 
from sales s inner join menu m on s."product_id" = m."product_id")
where rank = 1 ;

4.What is the most purchased item on the menu and how many times was it purchased by all customers?

select m."product_name",s."product_id",
count(s."product_id") as purchase_frequency
from menu m inner join sales s on s."product_id" = m."product_id"
group by 1,2
order by s."product_id" desc
limit 1;

5.Which item was the most popular for each customer?

select s."customer_id",max(m."product_name") as most_purchased 
from sales s inner join menu m on s."product_id" = m."product_id"
group by 1;

6.Which item was purchased first by the customer after they became a member?

select s."customer_id",m."product_name" from sales s inner join members mem on s."customer_id" = mem."customer_id" 
inner join menu m on s."product_id" = m."product_id"
where mem."join_date" <= s."order_date"
group by 1,2;

7.Which item was purchased just before the customer became a member?

select s."customer_id",m."product_name" from sales s inner join members mem on s."customer_id" = mem."customer_id" 
inner join menu m on s."product_id" = m."product_id"
where mem."join_date" >= s."order_date" 
group by 1,2;


8.What is the total items and amount spent for each member before they became a member?

select s."customer_id",count(m."product_name") as total_items_before_mem, sum(m."price")as total_amount_before_mem 
from sales s inner join members mem on s."customer_id" = mem."customer_id" 
inner join menu m on s."product_id" = m."product_id"
where mem."join_date" >= s."order_date" 
group by 1;

9.If each $1 spent equates to 10 points and sushi has a 2x points multiplier - how many points would each customer have?

WITH points
as (
select s."customer_id", s."product_id",m."price",
 case 
        when s."product_id" = 1 then m."price" * 20
        else m."price" *10
        end as points
from sales s inner join menu m on s."product_id" = m."product_id")

select "customer_id",
 SUM(points) as total_points
from points
group by 1
;

10.In the first week after a customer joins the program (including their join date) they earn 2x points on all items, not just sushi - how many points do customer A and B have at the end of January?

WITH jan_points 
as(
select s."customer_id",s."order_date",mem."join_date",
DATEADD(DAY, '6',mem."join_date") as end_promo,
s."product_id",
m."price",
 case
     when s."product_id" = 1 then m."price" * 20 
     when s."product_id" != 1 and (s."order_date" between mem."join_date" and DATEADD(day,'6',mem."join_date")) then m."price" * 20
     else m."price" * 10
     end as points
from sales s join menu m on s."product_id" = m."product_id"
join members mem on mem."customer_id" = s."customer_id"
where s."order_date" <= '2021-01-31'
)
select "customer_id", SUM(points) AS total
from jan_points
group by 1;

11. Bonus Questions Join All The Things

select s."customer_id",s."order_date",m."product_name",m."price",
 case
        when s."order_date" < mem."join_date" then 'N'
        when s."order_date" >= mem."join_date" then 'Y'
        else 'N'
        end as member
from sales s
join menu m on s."product_id" = m."product_id"
left join members mem on s."customer_id" = mem."customer_id"; 


12. Rank All The Things

with rank 
as (
select s."customer_id",s."order_date",m."product_name",m."price",
 case
        when s."order_date" < mem."join_date" then 'N'
        when s."order_date" >= mem."join_date" then 'Y'
        else 'N'
        end as member
from sales s
join menu m on s."product_id" = m."product_id"
left join members mem on s."customer_id" = mem."customer_id"
)
select "customer_id","order_date","product_name","price", member ,
row_number() over (partition by "customer_id" order by "order_date" asc) as num from rank
where member = 'Y';
